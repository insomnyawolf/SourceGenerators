<!--
https://github.com/dotnet/project-system/issues/4353
Before build Directory.Build.props
After build Directory.Builds.targets
-->

<!--

All the configs here can be overrided per project as required

-->

<Project>
	<!-- Do not change this, it can cause undefined behaviour in CI/CD pipelines -->
	<PropertyGroup>
		<ProjectName>$(MSBuildProjectName)</ProjectName>
	</PropertyGroup>

	<!-- Authors, Attributions, Urls and other configs -->
	<PropertyGroup>
		<Authors>insomnyawolf</Authors>
		<Title>$(ProjectName)</Title>
		
		<RepositoryType>git</RepositoryType>
		<BaseRepositoryUrl>https://github.com/insomnyawolf/SourceGenerators</BaseRepositoryUrl>
	</PropertyGroup>

	<!-- Version Config -->
	<PropertyGroup>
		<MajorVersion>8</MajorVersion>
		<MinorVersion>0</MinorVersion>
		<BuildNumber>0</BuildNumber>

		<!--
			Time is utc to avoid issues caused by compiling the nuget in machines on different timezones
		-->
		<!-- 
			Added a '.' between yyyyMMdd and HHmmss to avoid build errors
			Otherwise the number is so big that creates an overflow that causes the build to error out
		-->
		<!-- 
			"Requiered" because of the previous step
			
			Added a preceding 99 to the HHmmss part because if the number start with 1 or several 0 they will be skipped 
			That way the version number is always the same length which will hep with consistency checking version numbers and such
			I picked 99 because it's not a valid time so it won't be confused
			
			the final version will look like this: 8.0.20240614.99105216
		-->

		<GenerateAssemblyInfo>false</GenerateAssemblyInfo>
		<!-- exceeds uint16 range and causes the compilation to fail if ge generate assembly info-->
		<PatchVersion>$([System.DateTime]::UtcNow.ToString("yyyyMMdd"))</PatchVersion>
		<BuildVersion>$([System.DateTime]::UtcNow.ToString("99HHmmss"))</BuildVersion>

		<Version>$(MajorVersion).$(MinorVersion).$(PatchVersion).$(BuildVersion)</Version>
		<PackageVersion>$(PackageVersion)</PackageVersion>
	</PropertyGroup>

	<!-- Project Config -->
	<PropertyGroup>
		<LangVersion>preview</LangVersion>
		<Nullable>enable</Nullable>
		<ImplicitUsings>false</ImplicitUsings>
		<Deterministic>true</Deterministic>
	</PropertyGroup>
	
	<!--SourceGenerator Specific Config-->
	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<IsRoslynComponent>true</IsRoslynComponent>
		<EnforceExtendedAnalyzerRules>true</EnforceExtendedAnalyzerRules>
		<SuppressDependenciesWhenPacking>true</SuppressDependenciesWhenPacking>
		<!-- Do not include the generator as a lib dependency -->
		<IncludeBuildOutput>false</IncludeBuildOutput>
	</PropertyGroup>

	<!-- Have all versions in the same file to ease updates without cross version dependence issues -->
	<PropertyGroup>
		<ManagePackageVersionsCentrally>true</ManagePackageVersionsCentrally>
	</PropertyGroup>

	<!-- The following libraries include the source generator interfaces and types we need -->
	<ItemGroup>
		<PackageReference Include="Microsoft.CodeAnalysis.CSharp"/>
		<PackageReference Include="Microsoft.CodeAnalysis.Analyzers">
			<PrivateAssets>all</PrivateAssets>
			<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
		</PackageReference>
	</ItemGroup>

	<!-- Warn Config -->
	<PropertyGroup>
		<!--
			// Warning definitions
			CS[XXXX]
			https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/nullable-warnings
			NU[XXXX]
			https://learn.microsoft.com/en-us/nuget/reference/errors-and-warnings/
			SA[XXXX]
			https://github.com/DotNetAnalyzers/StyleCopAnalyzers/tree/master/documentation
		-->
		<NoWarn>
		</NoWarn>
	</PropertyGroup>

	<!-- Nuget Publish Settings -->
	<PropertyGroup>
		<!-- Paths are relative to the nuget package -->
		<PackageReadmeFile>README.md</PackageReadmeFile>

		<!--<PackageLicenseFile>LICENSE.md</PackageLicenseFile>
		<PackageRequireLicenseAcceptance>True</PackageRequireLicenseAcceptance>-->

		<PackageId>$(Authors).$(Title).$(ProjectName)</PackageId>
		<PackageProjectUrl>$(RepositoryUrl)</PackageProjectUrl>
		
		<IncludeSource>True</IncludeSource>
		<!-- Include source in theory includes symbols as well by default -->
		<!--<IncludeSymbols>True</IncludeSymbols>-->
		<!-- 
			We are not using the snupkg format because it splits
			the nuget in 2, one with the library and one with the symbols
			that way we would miss the chance of not needing to do anything to add the symbols to the nuget
			which will be helpful if errors happen on other solution because we'll get better error messages
		-->
		<!--<SymbolPackageFormat>snupkg</SymbolPackageFormat>-->
	</PropertyGroup>

	<!-- Build Includes Config -->
	<ItemGroup>
		<!-- Package the generator in the analyzer directory of the nuget package -->
		<!-- This ensures the library will be packaged as a source generator when we use `dotnet pack` -->
		<!-- Avoid using wildcards here in azure pipelines, the won't work -->
		<None Include="$(OutputPath)\$(ProjectName).dll" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
		<None Include="$(OutputPath)\$(ProjectName).pdb" Pack="true" PackagePath="analyzers/dotnet/cs" Visible="false" />
		
		<!-- Add the other files into the nuget -->
		<None Include="$(ProjectDir)\$(PackageReadmeFile)" Pack="true" PackagePath="" />
		<!-- <None Include="$(ProjectDir)\$(PackageLicenseFile)" Pack="true" PackagePath="" /> -->
	</ItemGroup>
</Project>